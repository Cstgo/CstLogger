#include <SD.h>
#include <Wire.h>
#include "Rtc.h"
#include <dht11.h>

dht11 DHT;

///MQ7********************************************************************************
int adc_MQ = analogRead(A2);    //Sensor MQ7 se conecta en entrada Analogica 2
///MQ7********************************************************************************

///DHT11******************************************************************************
#define DHT11_ANALOG_IN A0      //Sensor DHT11 se conecta en entrada Analogica 0
///DHT11******************************************************************************

#define STATE_CONSOLE 1
#define STATE_LOGGER 2

#define SET_DATE 1
#define SET_TIME 2
#define BACK_LOGGING 3

///Sonido*****************************************************************************
#define PIN_ANALOG_IN A1        //Sensor Sonido se conecta en entrada Analogica 1
///Sonido*****************************************************************************

const int chipSelect = 8;

//Dust sensor*************************************************************************
int pin = 7;                    //Sensor Polvo se conecta en la entrada Digital 7
//Dust sensor*************************************************************************

unsigned long duration;
unsigned long starttime;
unsigned long sampletime_ms = 2000;
unsigned long lowpulseoccupancy = 0;


float ratio = 0;
float concentration = 0;
int state;
int command;
int sample_rate;
char time[20];
char date[20];

Rtc rtc;

void setup()
{ 
  Serial.begin(9600);
  pinMode(7,INPUT);
  starttime = millis();
  Serial.print("SD card init...");
  pinMode(10, OUTPUT);
  
  if (!SD.begin(chipSelect)) {
    Serial.println("FAILED");
    return;
  }
  Serial.println("OK");
  Serial.print("RTC init...");
  Rtc rtc = Rtc(0,0,0,1,1,1,11,0xAA);
  Serial.println("OK");
  Serial.println("");
  Serial.println("Type \"1\" to enter console mode.");
  Serial.println("");
  state = STATE_LOGGER;
  sample_rate = 1000;
  Serial.println("Log mode, sample rate = 1 sample per "+String(sample_rate)+" millis");
}

void loop()
{
  state = getState();
  switch(state){
    case STATE_LOGGER:
      loggerMode();
      delay(sample_rate);
      break;
    case STATE_CONSOLE:
      confMode();
      break;
  }
}

void loggerMode()
{
  ///MQ7********************************************************************************
  /// Esta parte corresponde al sensor MQ. El valor 1284 corresponde a Ro, el cual
  ///es la resistencia del sensor a 100 ppm de CO. Este valor de Ro se calcula 
  ///midiendo una concentracion de CO que sature al sensor hasta las 2000 ppm, a partir
  ///de la cual obtenemos un Rs determinado. A grandes concentraciones, el valor de Rs/Ro
  ///es muy pequeÃ±a, por lo que podemos despejar Ro y obtener su valor con precision.
  int adc_MQ = analogRead(A2); 
  float voltaje = adc_MQ * (5.0 / 1023.0); 
  float Rs=1000*((5-voltaje)/voltaje);  
  double monoxide =76.211*pow(Rs/1284, -1.663);
  ///MQ7********************************************************************************

  ///Dust Sensor************************************************************************
  duration = pulseIn(pin, LOW);
  lowpulseoccupancy = lowpulseoccupancy+duration;

  if ((millis()-starttime) >= sampletime_ms)
  {
    ratio = lowpulseoccupancy/(sampletime_ms*10.0); 
    concentration = 3.531073446*(1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62);
    lowpulseoccupancy = 0;
    starttime = millis();
  }
  ///Dust Sensor************************************************************************
  
  ///DHT11******************************************************************************
  ///Seccion correspondiente al sensor de temperatura y humedad. Para calibrar, se 
  ///debe usar un sensor ya calibrado y aplicar la diferencia que de respecto al 
  ///medido por el sensor calibrado. Estos cambios se hacen directo en la parte del
  ///datastring, por ejemplo /(DHT.humidity - 3)
  int chk;
  chk = DHT.read(DHT11_ANALOG_IN);    
  ///DHT11******************************************************************************

  ///Sound Sensor***********************************************************************
  ///Esta seccion corresponde al sensor de sonido. Se establece como valor minimo
  ///21 dB medido con otro sensor, se mide el value a estos dB (8 en este caso) y
  ///se procede a despejar el valor x de la siguiente ecuacion: 21=20*log(8/x) x~2.79
  int value;
  int value1;
  
  value = analogRead(PIN_ANALOG_IN);
  value1 = 20*log(value/2.8);
  
  ///Sound Sensor***********************************************************************
  
  String dataString = "";

  File dataFile = SD.open("datalog.csv", FILE_WRITE);
  
  if (dataFile) {
    rtc.GetDate();
    rtc.Time(time);
    rtc.Date(date);
    dataString += String(monoxide) + String("ppmv");
    dataString += ";";
    dataString += String(DHT.humidity) + String("%");
    dataString += ";";
    dataString += String(DHT.temperature) + String("Celsius");
    dataString += ";";
    dataString += String(concentration) + String("Particulas/L");
    dataString += ";";
    dataString += String(value1) + String("dB");
    dataString += ";";
    dataString += String(date);
    dataString += ";";    
    dataString += String(time);
    dataFile.println(dataString);

    dataFile.close();
    Serial.println(dataString);
  }  
}

void confMode(){
  Serial.println("");
  Serial.println("Console mode... type:");
  Serial.println("\"1\" Set Time");
  Serial.println("\"2\" Set Date");
  Serial.println("\"3\" Start logging");
  Serial.println("");
  while(1){
    if(Serial.available()){
      command = getCommand();
        switch(command){
          case BACK_LOGGING:
            state = STATE_LOGGER;
            break;
          case SET_TIME:
            setTime();
            state = STATE_CONSOLE;
            break;
          case SET_DATE:
            setDate();
            break;

        }
      break;
    }
  }
}

int getState(){
  int ret = state;
  if(Serial.available()){
    switch(Serial.read()){
      case 49:
        ret = STATE_CONSOLE;
        break;
      case 50:
        ret = STATE_LOGGER;
        break;
    }
  }
  return ret;
}

int getCommand(){
  int ret;
  switch(Serial.read()){
    case 49:
      ret = SET_TIME;
      break;
    case 50:
      ret = SET_DATE;
      break;
    case 51:
      ret = BACK_LOGGING;
      break;
    }
  return ret;
}

void setTime(){
  char hour;
  char minutes;
  char seconds;
  char buf[3];
  Serial.println("Type hour 0-23:");
  readLine(buf);
  hour = (char)atoi(buf);
  Serial.println("Type minutes 0-59");
  readLine(buf);
  minutes = (char)atoi(buf);
  Serial.println("Type seconds 0-59");
  readLine(buf);
  seconds = (char)atoi(buf);
  rtc.SetDate(seconds,minutes,hour,rtc.dayOfWeek,rtc.dayOfMonth,rtc.month,rtc.year);
}

void setDate(){
  char dayOfWeek;
  char dayOfMonth;
  char month;
  char year;
  char buf[3];
  
  Serial.println("Type day of week 1-7:");
  readLine(buf);
  dayOfWeek = (char)atoi(buf);

  Serial.println("Type day of month 1-31:");
  readLine(buf);
  dayOfMonth = (char)atoi(buf);

  Serial.println("Type month 1-12:");
  readLine(buf);
  month = (char)atoi(buf);

  Serial.println("Type year 00-99:");
  readLine(buf);
  year = (char)atoi(buf);

  rtc.SetDate(rtc.second,rtc.minute,rtc.hour,dayOfWeek,dayOfMonth,month,year);
}

int getSampleRate(){
  int i = 0;
  char buf[10];
  readLine(buf);
  return atoi(buf);
}

void readLine(char *buf){
  while(1){
    if(Serial.available()){
      int i = 0;
      while(1){
        delay(50);
        if(Serial.available()){
          buf[i] = Serial.read();
        }
        else{
          break;
        }
        i++;
      }
      buf[i] = '\0';
      break;
    }
  }
}
